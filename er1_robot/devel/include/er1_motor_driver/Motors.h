// Generated by gencpp from file er1_motor_driver/Motors.msg
// DO NOT EDIT!


#ifndef ER1_MOTOR_DRIVER_MESSAGE_MOTORS_H
#define ER1_MOTOR_DRIVER_MESSAGE_MOTORS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace er1_motor_driver
{
template <class ContainerAllocator>
struct Motors_
{
  typedef Motors_<ContainerAllocator> Type;

  Motors_()
    : x_vel(0.0)
    , a_vel(0.0)  {
    }
  Motors_(const ContainerAllocator& _alloc)
    : x_vel(0.0)
    , a_vel(0.0)  {
    }



   typedef double _x_vel_type;
  _x_vel_type x_vel;

   typedef double _a_vel_type;
  _a_vel_type a_vel;




  typedef boost::shared_ptr< ::er1_motor_driver::Motors_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::er1_motor_driver::Motors_<ContainerAllocator> const> ConstPtr;

}; // struct Motors_

typedef ::er1_motor_driver::Motors_<std::allocator<void> > Motors;

typedef boost::shared_ptr< ::er1_motor_driver::Motors > MotorsPtr;
typedef boost::shared_ptr< ::er1_motor_driver::Motors const> MotorsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::er1_motor_driver::Motors_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::er1_motor_driver::Motors_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace er1_motor_driver

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'er1_motor_driver': ['/home/arvind/clover_hack_day/er1_robot/src/er1_motor_driver/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::er1_motor_driver::Motors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::er1_motor_driver::Motors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::er1_motor_driver::Motors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::er1_motor_driver::Motors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::er1_motor_driver::Motors_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::er1_motor_driver::Motors_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::er1_motor_driver::Motors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "247669618c35d5eb8da138f0f63e7eec";
  }

  static const char* value(const ::er1_motor_driver::Motors_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x247669618c35d5ebULL;
  static const uint64_t static_value2 = 0x8da138f0f63e7eecULL;
};

template<class ContainerAllocator>
struct DataType< ::er1_motor_driver::Motors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "er1_motor_driver/Motors";
  }

  static const char* value(const ::er1_motor_driver::Motors_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::er1_motor_driver::Motors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x_vel\n\
float64 a_vel\n\
";
  }

  static const char* value(const ::er1_motor_driver::Motors_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::er1_motor_driver::Motors_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_vel);
      stream.next(m.a_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Motors_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::er1_motor_driver::Motors_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::er1_motor_driver::Motors_<ContainerAllocator>& v)
  {
    s << indent << "x_vel: ";
    Printer<double>::stream(s, indent + "  ", v.x_vel);
    s << indent << "a_vel: ";
    Printer<double>::stream(s, indent + "  ", v.a_vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ER1_MOTOR_DRIVER_MESSAGE_MOTORS_H
